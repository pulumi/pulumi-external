// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.external.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetExternalResult {
    /**
     * @return The id of the data source. This will always be set to `-`
     * 
     */
    private String id;
    private List<String> programs;
    /**
     * @return A map of string values to pass to the external program as the query arguments. If not supplied, the program will receive an empty object as its input.
     * 
     */
    private @Nullable Map<String,String> query;
    /**
     * @return A map of string values returned from the external program.
     * 
     */
    private Map<String,String> result;
    /**
     * @return Working directory of the program. If not supplied, the program will run in the current directory.
     * 
     */
    private @Nullable String workingDir;

    private GetExternalResult() {}
    /**
     * @return The id of the data source. This will always be set to `-`
     * 
     */
    public String id() {
        return this.id;
    }
    public List<String> programs() {
        return this.programs;
    }
    /**
     * @return A map of string values to pass to the external program as the query arguments. If not supplied, the program will receive an empty object as its input.
     * 
     */
    public Map<String,String> query() {
        return this.query == null ? Map.of() : this.query;
    }
    /**
     * @return A map of string values returned from the external program.
     * 
     */
    public Map<String,String> result() {
        return this.result;
    }
    /**
     * @return Working directory of the program. If not supplied, the program will run in the current directory.
     * 
     */
    public Optional<String> workingDir() {
        return Optional.ofNullable(this.workingDir);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetExternalResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String id;
        private List<String> programs;
        private @Nullable Map<String,String> query;
        private Map<String,String> result;
        private @Nullable String workingDir;
        public Builder() {}
        public Builder(GetExternalResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.programs = defaults.programs;
    	      this.query = defaults.query;
    	      this.result = defaults.result;
    	      this.workingDir = defaults.workingDir;
        }

        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetExternalResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder programs(List<String> programs) {
            if (programs == null) {
              throw new MissingRequiredPropertyException("GetExternalResult", "programs");
            }
            this.programs = programs;
            return this;
        }
        public Builder programs(String... programs) {
            return programs(List.of(programs));
        }
        @CustomType.Setter
        public Builder query(@Nullable Map<String,String> query) {

            this.query = query;
            return this;
        }
        @CustomType.Setter
        public Builder result(Map<String,String> result) {
            if (result == null) {
              throw new MissingRequiredPropertyException("GetExternalResult", "result");
            }
            this.result = result;
            return this;
        }
        @CustomType.Setter
        public Builder workingDir(@Nullable String workingDir) {

            this.workingDir = workingDir;
            return this;
        }
        public GetExternalResult build() {
            final var _resultValue = new GetExternalResult();
            _resultValue.id = id;
            _resultValue.programs = programs;
            _resultValue.query = query;
            _resultValue.result = result;
            _resultValue.workingDir = workingDir;
            return _resultValue;
        }
    }
}
