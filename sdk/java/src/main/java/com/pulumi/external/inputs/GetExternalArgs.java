// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.external.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetExternalArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetExternalArgs Empty = new GetExternalArgs();

    @Import(name="programs", required=true)
    private Output<List<String>> programs;

    public Output<List<String>> programs() {
        return this.programs;
    }

    /**
     * A map of string values to pass to the external program as the query arguments. If not supplied, the program will receive an empty object as its input.
     * 
     */
    @Import(name="query")
    private @Nullable Output<Map<String,String>> query;

    /**
     * @return A map of string values to pass to the external program as the query arguments. If not supplied, the program will receive an empty object as its input.
     * 
     */
    public Optional<Output<Map<String,String>>> query() {
        return Optional.ofNullable(this.query);
    }

    /**
     * Working directory of the program. If not supplied, the program will run in the current directory.
     * 
     */
    @Import(name="workingDir")
    private @Nullable Output<String> workingDir;

    /**
     * @return Working directory of the program. If not supplied, the program will run in the current directory.
     * 
     */
    public Optional<Output<String>> workingDir() {
        return Optional.ofNullable(this.workingDir);
    }

    private GetExternalArgs() {}

    private GetExternalArgs(GetExternalArgs $) {
        this.programs = $.programs;
        this.query = $.query;
        this.workingDir = $.workingDir;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetExternalArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetExternalArgs $;

        public Builder() {
            $ = new GetExternalArgs();
        }

        public Builder(GetExternalArgs defaults) {
            $ = new GetExternalArgs(Objects.requireNonNull(defaults));
        }

        public Builder programs(Output<List<String>> programs) {
            $.programs = programs;
            return this;
        }

        public Builder programs(List<String> programs) {
            return programs(Output.of(programs));
        }

        public Builder programs(String... programs) {
            return programs(List.of(programs));
        }

        /**
         * @param query A map of string values to pass to the external program as the query arguments. If not supplied, the program will receive an empty object as its input.
         * 
         * @return builder
         * 
         */
        public Builder query(@Nullable Output<Map<String,String>> query) {
            $.query = query;
            return this;
        }

        /**
         * @param query A map of string values to pass to the external program as the query arguments. If not supplied, the program will receive an empty object as its input.
         * 
         * @return builder
         * 
         */
        public Builder query(Map<String,String> query) {
            return query(Output.of(query));
        }

        /**
         * @param workingDir Working directory of the program. If not supplied, the program will run in the current directory.
         * 
         * @return builder
         * 
         */
        public Builder workingDir(@Nullable Output<String> workingDir) {
            $.workingDir = workingDir;
            return this;
        }

        /**
         * @param workingDir Working directory of the program. If not supplied, the program will run in the current directory.
         * 
         * @return builder
         * 
         */
        public Builder workingDir(String workingDir) {
            return workingDir(Output.of(workingDir));
        }

        public GetExternalArgs build() {
            $.programs = Objects.requireNonNull($.programs, "expected parameter 'programs' to be non-null");
            return $;
        }
    }

}
